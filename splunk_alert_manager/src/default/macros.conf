[alert_manager_index]
definition = (index="main" OR index="alerts")

[all_alerts]
definition = (`alert_manager_index`) sourcetype="alert_metadata" \
| fields _time, incident_id, alert, app, category, subcategory, tags, earliest, latest, eventSearch, owner, priority, result_id, title, urgency, alert_time, display_fields \
| lookup incidents incident_id OUTPUT alert, title, owner, status, impact, urgency, external_reference_id, duplicate_count, alert_time as earliest_alert_time, group_id, category, subcategory, tags, display_fields \
| lookup incident_groups _key AS group_id OUTPUT group \
| lookup alert_priority impact, urgency OUTPUT priority \
| lookup incident_settings alert OUTPUTNEW category AS category_settings, subcategory as subcategory_setttings, tags as tags_settings, display_fields as display_fields_settings \
| lookup alert_status status OUTPUT status_description \
| dedup incident_id \
| eval first_seen=strftime(earliest_alert_time, "%Y-%m-%d %H:%M:%S"), title=if(isnull(title) OR title="",alert,title), category=if(category="" OR isnull(category),category_settings,category),subcategory=if(subcategory="" OR isnull(subcategory),subcategory_settings,subcategory),tags=if(tags="",tags_settings,tags),display_fields=if(display_fields="",display_fields_settings,display_fields) \
| fillnull value="" tags, category, subcategory \
| eval tags=if(tags=="","[Untagged]",tags) \
| makemv delim=" " tags
iseval = 0

[all_alerts(1)]
definition = (`alert_manager_index`) sourcetype="alert_metadata" \
| dedup incident_id \
|  search ( [ | inputlookup incidents \
    | search $filter$ \
    | fields incident_id \
    | return 1000 incident_id \
    | eval search=if(isnull(search) OR search="" ,"NOT *",search) ] OR [ | inputlookup incident_results \
      | search [| makeresults 1 \
      | eval filter="$filter$" \
      | rex mode=sed field=filter "s/(\S+)([=<>!]+)/fields.\1\2/g" \
      | return $filter ] \
    | fields incident_id \
    | return 1000 incident_id | eval search=if(isnull(search) OR search="" ,"NOT *",search) ] ) \
| lookup incidents incident_id OUTPUT alert, title, owner, status, impact, urgency, external_reference_id, duplicate_count, alert_time as earliest_alert_time, group_id, category, subcategory, tags, display_fields \
| lookup incident_groups _key AS group_id OUTPUT group \
| lookup alert_priority impact, urgency OUTPUT priority \
| lookup incident_settings alert OUTPUTNEW category AS category_settings, subcategory as subcategory_setttings, tags as tags_settings, display_fields as display_fields_settings \
| lookup alert_status status OUTPUT status_description \
| eval first_seen=strftime(earliest_alert_time, "%Y-%m-%d %H:%M:%S"), title=if(isnull(title) OR title="",alert,title), category=if(category="" OR isnull(category),category_settings,category),subcategory=if(subcategory="" OR isnull(subcategory),subcategory_settings,subcategory),tags=if(tags="",tags_settings,tags),display_fields=if(display_fields="",display_fields_settings,display_fields) \
| fillnull value="" tags, category, subcategory \
| eval tags=if(tags=="","[Untagged]",tags) \
| makemv delim=" " tags
args = filter
iseval = 0

[all_alerts_single_trend(2)]
args = earliest, latest
definition = tstats count from datamodel="alert_manager" where nodename="all_alerts" earliest="$earliest$" latest="$latest$" by all_alerts.incident_id | rename all_alerts.incident_id AS incident_id | lookup incidents incident_id OUTPUT impact, urgency | lookup alert_priority impact, urgency OUTPUT priority | fields priority
iseval = 0

[all_alerts_single_trend]
definition = (`alert_manager_index`) sourcetype="alert_metadata" \
| dedup incident_id \
| fields _time, incident_id \
| lookup incidents incident_id OUTPUT impact, urgency \
| lookup alert_priority impact, urgency OUTPUT priority
iseval = 0

[all_alerts_pivot]
definition = pivot alert_manager all_alerts SPLITROW _time PERIOD auto SPLITROW label AS alert SPLITROW app SPLITROW incident_id  SPLITROW event_search SPLITROW search  SPLITROW severity SPLITROW earliest SPLITROW latest ROWSUMMARY 0 COLSUMMARY 0 NUMCOLS 0 SHOWOTHER 1 | sort - _time | lookup incidents incident_id OUTPUT |lookup incident_settings alert OUTPUT category, subcategory, priority |lookup alert_urgencies severity, priority OUTPUT urgency
iseval = 0

[incident_changes]
definition = (`alert_manager_index`) sourcetype="incident_change" \
| lookup incident_groups _key AS group_id OUTPUT group \
| lookup incident_groups _key AS previous_group_id OUTPUT group as previous_group

[incident_changes(1)]
definition = (`alert_manager_index`) sourcetype="incident_change" incident_id=$incident_id$ \
| lookup incident_groups _key AS group_id OUTPUT group \
| lookup incident_groups _key AS previous_group_id OUTPUT group as previous_group
args = incident_id 

[incident_history(1)]
args = incident_id
definition = `incident_changes($incident_id$)` \
| eval previous_group=if(isnotnull(group_id) AND isnull(previous_group),"ungrouped", previous_group) \
| eval previous_value=coalesce(previous_status, previous_owner, previous_urgency, previous_group) \
| eval attribute=case(isnotnull(owner),"owner",isnotnull(urgency),"urgency",isnotnull(status),"status",isnotnull(group),"group") \
| eval attribute_val=case(isnotnull(owner),owner,isnotnull(urgency),urgency,isnotnull(status),status,isnotnull(group),group) \
| eval suppression_rules=if(isnotnull(suppression_rule),mvjoin(suppression_rule,", "),"") \
| eval details=case(action="auto_previous_resolve","Incident resolved by system (because of a new incident)",action="auto_ttl_resolve","Incident resolved by system (TTL reached)",action="create","Incident created",action="change",attribute + " has been changed from '" + previous_value + "' to '" + attribute_val+"'", action="suppress", "Incident suppressed by rules: " + suppression_rule, action="auto_suppress_resolve", "Incident auto-suppressed by rules: " + suppression_rule, action="comment", "Comment added", action="new_subsequent_incident", "New identical incident with incident_id='"+ new_incident_id +"' has been created and automatically resolved.", action="auto_subsequent_resolve", "Incident resolved by system (because of a identical pre-existing incident)") \
| lookup alert_status status OUTPUT status_description \
| table _time, action, user, owner, status_description, details, comment

[incident_details(2)]
args = incident_id, fields
definition = loadincidentresults incident_id=$incident_id$ | fields $fields$ | table $fields$ | transpose | rename column AS Key, "row 1" AS Value, "row 2" AS "Value 2", "row 3" AS "Value 3", "row 4" AS "Value 4", "row 5" AS "Value 5",
iseval = 0

[incident_details(1)]
args = incident_id
definition = loadincidentresults incident_id=$incident_id$ | transpose | rename column AS Key, "row 1" AS Value, "row 2" AS "Value 2", "row 3" AS "Value 3", "row 4" AS "Value 4", "row 5" AS "Value 5"
iseval = 0

[alert_users]
definition = rest /services/admin/alert_manager/settings | fields default_owner | rename default_owner AS name | append [ makeresults | eval name="unassigned" ] | fields - _time | append [ inputlookup alert_users | sort name | fields name ] | dedup name
